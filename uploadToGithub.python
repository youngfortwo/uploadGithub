import logging
from github import Github, GithubException
import os
import random

# 配置日志记录
logging.basicConfig(filename='uploadGithub.log', level=logging.INFO,
                    format='%(asctime)s %(levelname)s:%(message)s')

def read_tokens_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            tokens = [line.strip() for line in file.readlines()]
        logging.info("Successfully read tokens from file.")
        return tokens
    except Exception as e:
        logging.error(f"Failed to read tokens from file: {e}")
        return []

def write_token_to_file(token, file_path):
    try:
        with open(file_path, 'a') as file:
            file.write(token + '\n')
        logging.info("Successfully wrote token to file.")
    except Exception as e:
        logging.error(f"Failed to write token to file: {e}")

def read_used_tokens(file_path):
    try:
        with open(file_path, 'r') as file:
            used_tokens = {line.strip() for line in file.readlines()}
        logging.info("Successfully read used tokens.")
        return used_tokens
    except FileNotFoundError:
        logging.warning("Used tokens file not found, starting with an empty set.")
        return set()
    except Exception as e:
        logging.error(f"Failed to read used tokens: {e}")
        return set()

def write_left_tokens(left_tokens, file_path):
    try:
        with open(file_path, 'w') as file:
            for token in left_tokens:
                file.write(token + '\n')
        logging.info("Successfully wrote left tokens to file.")
    except Exception as e:
        logging.error(f"Failed to write left tokens to file: {e}")

def clear_file(file_path):
    try:
        with open(file_path, 'w') as file:
            file.write('')
        logging.info("Successfully cleared file.")
    except Exception as e:
        logging.error(f"Failed to clear file: {e}")

def login_to_github(access_token):
    try:
        g = Github(access_token)
        user = g.get_user()
        logging.info(f"Logged in as {user.login}")
        return g
    except GithubException as e:
        logging.error(f"Failed to login: {e}")
        return None

def get_random_repo_name(repo_list):
    return random.choice(repo_list)

def create_repo_if_not_exists(github_instance, repo_name):
    user = github_instance.get_user()
    try:
        repo = user.get_repo(repo_name)
        logging.info(f"Repository '{repo_name}' already exists.")
    except GithubException:
        repo = user.create_repo(repo_name)
        logging.info(f"Repository '{repo_name}' created.")
    return repo

def upload_random_file_to_repo(repo, local_folder_path):
    try:
        files = [os.path.join(root, file) for root, _, files in os.walk(local_folder_path) for file in files]
        if not files:
            logging.warning("No files found in the local folder.")
            return
        file_path = random.choice(files)
        with open(file_path, "rb") as file:
            content = file.read()
        relative_path = os.path.relpath(file_path, local_folder_path)
        repo.create_file(relative_path, f"Add {relative_path}", content)
        logging.info(f"Uploaded {relative_path}")
    except GithubException as e:
        logging.error(f"Failed to upload file: {e}")

def main(token_file, used_token_file, left_token_file, repo_list, local_folder_path):
    logging.info("Script started.")

    # Ensure the used_token_file and left_token_file exist
    open(used_token_file, 'a').close()
    open(left_token_file, 'a').close()

    tokens = read_tokens_from_file(token_file)
    if not tokens:
        logging.warning("No tokens available.")
        return

    used_tokens = read_used_tokens(used_token_file)
    new_tokens = [token for token in tokens]

    if not new_tokens:
        logging.warning("No new tokens available.")
        return

    access_token = random.choice(new_tokens)
    github_instance = login_to_github(access_token)
    if github_instance:
        repo_name = get_random_repo_name(repo_list)
        repo = create_repo_if_not_exists(github_instance, repo_name)
        upload_random_file_to_repo(repo, local_folder_path)
        write_token_to_file(access_token, used_token_file)

        # Update LeftToken.txt
        left_tokens = [token for token in tokens if token not in used_tokens and token != access_token]
        write_left_tokens(left_tokens, left_token_file)

        # 清空used_token_file.txt的数据当left_token_file.txt无数据的时候
        if not left_tokens:
            logging.info("No tokens left in left_token_file.txt. Clearing used_token_file.txt.")
            clear_file(used_token_file)

        # Print the content of LeftToken.txt
        logging.info("Content of LeftToken.txt:")
        for token in left_tokens:
            logging.info(token)
        
        # Print the number of tokens in LeftToken.txt
        logging.info(f"Number of tokens in LeftToken.txt: {len(left_tokens)}")

    logging.info("Script finished.")

# Replace these variables with your own details
token_file = "path_to_gitToken.txt"
used_token_file = "used_token_file.txt"
left_token_file = "left_token_file.txt"
repo_list = ["TestCodeRepo", "StudyCodeRepo", "ResearchCodeRepo", "GameRepo", "WorkCodeRepo"]
local_folder_path = "/Users/yxy/IdeaProjects/python"

if __name__ == "__main__":
    main(token_file, used_token_file, left_token_file, repo_list, local_folder_path)
